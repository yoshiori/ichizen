name: Android Build Validation

on:
  workflow_dispatch: # Manual trigger
  push:
    branches: [main]
    paths:
      - "apps/mobile/**"
      - ".github/workflows/android-build.yml"
  pull_request:
    branches: [main, develop]
    paths:
      - "apps/mobile/**"
      - ".github/workflows/android-build.yml"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Quick checks for PRs
  quick-check:
    name: Quick Android Checks
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Quick checks with Turborepo
        run: npx turbo run mobile:check --filter=mobile

  # Full build for main branch
  android-build:
    name: Android Build Validation
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      # Restore Turborepo cache
      - name: Restore Turborepo cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules/.cache/turbo
            apps/mobile/.turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Install dependencies
        run: npm ci

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Setup Expo
        uses: expo/expo-github-action@v8
        with:
          expo-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: Setup EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      # Cache Expo prebuild
      - name: Get Expo prebuild cache key
        id: expo-cache-key
        working-directory: apps/mobile
        run: |
          echo "expo-hash=${{ hashFiles('**/package-lock.json', '**/app.config.js', '**/android/**/*.gradle*') }}" >> $GITHUB_OUTPUT

      - name: Restore Expo prebuild cache
        id: expo-prebuild-cache
        uses: actions/cache@v4
        with:
          path: |
            apps/mobile/android
          key: ${{ runner.os }}-expo-android-prebuild-${{ steps.expo-cache-key.outputs.expo-hash }}

      - name: Prebuild Android with Turborepo
        if: steps.expo-prebuild-cache.outputs.cache-hit != 'true'
        run: |
          # Generate native Android project using Turborepo task
          npx turbo run mobile:prebuild:android --filter=mobile

      # Optimized Gradle cache with stable key
      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.gradle/daemon
          key: ${{ runner.os }}-gradle-${{ hashFiles('apps/mobile/package-lock.json', 'apps/mobile/app.config.js') }}-v2
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Pre-download dependencies to improve cache efficiency
      - name: Pre-download Gradle dependencies
        working-directory: apps/mobile/android
        run: |
          # Enable Gradle daemon and configure JVM for CI (max 3GB for 7GB runner)
          export GRADLE_OPTS="-Xmx3g -XX:MaxMetaspaceSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8"
          export GRADLE_USER_HOME=~/.gradle

          # Pre-download dependencies without building
          ./gradlew dependencies --quiet --parallel --continue || true

          # Download Android SDK components
          ./gradlew downloadDependencies --quiet --parallel --continue || true

          echo "✅ Gradle dependencies pre-downloaded"

      - name: Make gradlew executable
        working-directory: apps/mobile/android
        run: chmod +x gradlew

      - name: Check Android build environment
        working-directory: apps/mobile/android
        run: |
          # Check Android SDK and Gradle
          ./gradlew --version
          echo "Available Android SDK packages:"
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --list | grep "build-tools" | head -10

      - name: Optimized Android build validation
        working-directory: apps/mobile/android
        run: |
          # Use optimized Gradle settings for CI (max 3GB for 7GB runner)
          export GRADLE_OPTS="-Xmx3g -XX:MaxMetaspaceSize=512m -Dorg.gradle.daemon=true -Dorg.gradle.parallel=true -Dorg.gradle.configureondemand=true"
          export GRADLE_USER_HOME=~/.gradle

          # Enable Gradle daemon for faster subsequent builds
          ./gradlew --daemon --quiet --parallel

          # Validate build setup
          ./gradlew tasks --quiet --parallel
          echo "✅ Android build setup validated successfully"

          # Test dependency resolution
          ./gradlew dependencies --configuration debugCompileClasspath --quiet --parallel | head -20
          echo "✅ Android dependencies resolved successfully"

          # Show cache status
          echo "📊 Gradle cache status:"
          du -sh ~/.gradle/caches/ 2>/dev/null || echo "Cache not found"

      - name: Archive build validation results
        if: success()
        working-directory: apps/mobile/android
        run: |
          # Create validation summary
          echo "# Android Build Validation Summary" > validation-summary.md
          echo "- Build setup: ✅ Validated" >> validation-summary.md
          echo "- Dependencies: ✅ Resolved" >> validation-summary.md
          echo "- Gradle version: $(./gradlew --version | grep 'Gradle' | head -1)" >> validation-summary.md
          echo "- Java version: $JAVA_HOME" >> validation-summary.md

      - name: Upload validation summary
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: android-validation-${{ github.sha }}
          path: apps/mobile/android/validation-summary.md
          retention-days: 7

      - name: Enhanced Summary with Cache Performance
        if: always()
        run: |
          echo "## 🚀 Android Build Summary (Optimized Cache)" >> $GITHUB_STEP_SUMMARY
          echo "- Build Status: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- Branch: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Cache Performance:" >> $GITHUB_STEP_SUMMARY
          echo "- Expo Prebuild: ${{ steps.expo-prebuild-cache.outputs.cache-hit }}" >> $GITHUB_STEP_SUMMARY
          echo "- Gradle Dependencies: Optimized with stable key" >> $GITHUB_STEP_SUMMARY
          echo "- Gradle Daemon: Enabled for faster builds" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ⚡ Optimizations Applied:" >> $GITHUB_STEP_SUMMARY
          echo "- JVM Memory: 3GB heap, 512MB metaspace" >> $GITHUB_STEP_SUMMARY
          echo "- Gradle Parallel: Enabled" >> $GITHUB_STEP_SUMMARY
          echo "- Pre-download: Dependencies cached before build" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Validation Results:" >> $GITHUB_STEP_SUMMARY
          if [ "${{ job.status }}" == "success" ]; then
            echo "- Build Setup: ✅ Validated" >> $GITHUB_STEP_SUMMARY
            echo "- Dependencies: ✅ Resolved" >> $GITHUB_STEP_SUMMARY
            echo "- Cache Status: ✅ Optimized" >> $GITHUB_STEP_SUMMARY
            echo "- Artifact: android-validation-${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "- Validation: ❌ Failed" >> $GITHUB_STEP_SUMMARY
          fi
