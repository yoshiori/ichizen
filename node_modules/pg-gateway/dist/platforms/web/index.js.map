{"version":3,"sources":["../../../src/platforms/web/index.ts"],"sourcesContent":["import PostgresConnection, { type PostgresConnectionOptions } from '../../connection.js';\nimport type { DuplexStream } from '../../streams.js';\n\n/**\n * Creates a `PostgresConnection` from a `WebSocketStream`.\n *\n * Note Postgres `SSLRequest` upgrades are not supported in a `WebSocketStream`.\n */\nexport async function fromWebSocketStream(\n  wss: WebSocketStream,\n  options?: PostgresConnectionOptions,\n) {\n  const duplex = await duplexFromWebSocketStream(wss);\n  return new PostgresConnection(duplex, options);\n}\n\n/**\n * Creates a `DuplexStream<Uint8Array>` from a `WebSocketStream`.\n */\nexport async function duplexFromWebSocketStream(\n  wss: WebSocketStream,\n): Promise<DuplexStream<Uint8Array>> {\n  const { readable, writable } = await wss.opened;\n\n  return {\n    readable: ensureBinaryStream(\n      readable,\n      new Error('WebSocketStream must contain binary data for a PostgresConnection, found text'),\n    ),\n    writable,\n  };\n}\n\n/**\n * Ensures that a `ReadableStream` contains binary data and not text.\n */\nfunction ensureBinaryStream(readable: ReadableStream<string | Uint8Array>, error: Error) {\n  return ReadableStream.from(ensureBinaryIterable(readable, error));\n}\n\n/**\n * Ensures that an `AsyncIterable` contains binary data and not text.\n */\nasync function* ensureBinaryIterable(iterable: AsyncIterable<string | Uint8Array>, error: Error) {\n  for await (const chunk of iterable) {\n    if (typeof chunk === 'string') {\n      throw error;\n    }\n    yield chunk;\n  }\n}\n"],"mappings":"4CAQA,eAAsBA,EACpBC,EACAC,EACA,CACA,IAAMC,EAAS,MAAMC,EAA0BH,CAAG,EAClD,OAAO,IAAII,EAAmBF,EAAQD,CAAO,CAC/C,CAKA,eAAsBE,EACpBH,EACmC,CACnC,GAAM,CAAE,SAAAK,EAAU,SAAAC,CAAS,EAAI,MAAMN,EAAI,OAEzC,MAAO,CACL,SAAUO,EACRF,EACA,IAAI,MAAM,+EAA+E,CAC3F,EACA,SAAAC,CACF,CACF,CAKA,SAASC,EAAmBF,EAA+CG,EAAc,CACvF,OAAO,eAAe,KAAKC,EAAqBJ,EAAUG,CAAK,CAAC,CAClE,CAKA,eAAgBC,EAAqBC,EAA8CF,EAAc,CAC/F,cAAiBG,KAASD,EAAU,CAClC,GAAI,OAAOC,GAAU,SACnB,MAAMH,EAER,MAAMG,CACR,CACF","names":["fromWebSocketStream","wss","options","duplex","duplexFromWebSocketStream","PostgresConnection","readable","writable","ensureBinaryStream","error","ensureBinaryIterable","iterable","chunk"]}