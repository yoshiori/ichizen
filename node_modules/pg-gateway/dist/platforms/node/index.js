import{w as c}from"../../chunk-PGRRI4HM.js";import{Duplex as g}from"stream";import{X509Certificate as S}from"crypto";import{once as d}from"events";import{Duplex as p}from"stream";import{TLSSocket as C,createSecureContext as T}from"tls";async function m(t){let e=new S(Buffer.from(t.certificate)),r=Object.fromEntries(e.subject.split(/, ?/).map(o=>o.split("=")));return"CN"in r&&r.CN===t.username}async function l(t,e,r=!1){let o={},i=await f(e,r),n=new C(p.fromWeb(t),{...i,isServer:!0,SNICallback:async(a,u)=>{o.serverName=a;let y=await f(e,r,a);u(null,T(y))}});await d(n,"secure"),x(n);let s=n.getPeerCertificate();return s&&"raw"in s&&(o.clientCertificate=new Uint8Array(s.raw)),{duplex:p.toWeb(n),tlsInfo:o}}async function f(t,e,r){let{key:o,cert:i,ca:n,passphrase:s}=typeof t=="function"?await t(r):t;return{key:Buffer.from(o),cert:Buffer.from(i),ca:n?Buffer.from(n):void 0,passphrase:s,requestCert:e}}function x(t){if(t._requestCert){let e=t._handle.verifyError();e?t.authorizationError=e.code:t.authorized=!0}}async function A(t,e){return O(g.toWeb(t),e)}async function O(t,e){let r={...e};r?.auth?.method==="cert"&&(r.auth.validateCredentials=m);let o={upgradeTls:l};return new c(t,e,o)}export{O as fromDuplexStream,A as fromNodeSocket};
//# sourceMappingURL=index.js.map