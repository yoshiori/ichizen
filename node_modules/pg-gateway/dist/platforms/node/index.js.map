{"version":3,"sources":["../../../src/platforms/node/index.ts","../../../src/platforms/node/tls.ts"],"sourcesContent":["import type { Socket } from 'node:net';\nimport { Duplex } from 'node:stream';\nimport PostgresConnection, {\n  type PostgresConnectionAdapters,\n  type PostgresConnectionOptions,\n} from '../../connection.js';\nimport { upgradeTls, validateCredentials } from './tls.js';\nimport type { DuplexStream } from '../../streams.js';\n\n/**\n * Creates a `PostgresConnection` from a Node.js TCP/Unix `Socket`.\n *\n * `PostgresConnection` operates on web streams, so this helper\n * converts a `Socket` to/from the respective web streams.\n *\n * Also implements `upgradeTls()`, which makes Postgres `SSLRequest`\n * upgrades available in Node.js environments.\n */\nexport async function fromNodeSocket(socket: Socket, options?: PostgresConnectionOptions) {\n  return fromDuplexStream(Duplex.toWeb(socket), options);\n}\n\n/**\n * Creates a `PostgresConnection` from a `DuplexStream` with\n * Node.js adapters like `upgradeTls()` included.\n *\n * Useful in Node.js environments when you start from a\n * non-Socket stream but want Node.js TLS adapters.\n */\nexport async function fromDuplexStream(\n  duplex: DuplexStream<Uint8Array>,\n  options?: PostgresConnectionOptions,\n) {\n  const opts: PostgresConnectionOptions = {\n    ...options,\n  };\n\n  if (opts?.auth?.method === 'cert') {\n    opts.auth.validateCredentials = validateCredentials;\n  }\n\n  const adapters: PostgresConnectionAdapters = {\n    upgradeTls,\n  };\n\n  return new PostgresConnection(duplex, options, adapters);\n}\n","import { X509Certificate } from 'node:crypto';\nimport { once } from 'node:events';\nimport { Duplex } from 'node:stream';\nimport { TLSSocket, type TLSSocketOptions, createSecureContext } from 'node:tls';\nimport type { TlsOptions, TlsOptionsCallback } from '../../connection.js';\nimport type { TlsInfo } from '../../connection.types.js';\nimport type { DuplexStream } from '../../streams.js';\n\nexport async function validateCredentials(credentials: {\n  username: string;\n  certificate: Uint8Array;\n}) {\n  const cert = new X509Certificate(Buffer.from(credentials.certificate));\n\n  const subjectKeyValues: Record<string, string> = Object.fromEntries(\n    cert.subject.split(/, ?/).map((entry) => entry.split('=')),\n  );\n\n  return 'CN' in subjectKeyValues && subjectKeyValues.CN === credentials.username;\n}\n\nexport async function upgradeTls(\n  duplex: DuplexStream<Uint8Array>,\n  options: TlsOptions | TlsOptionsCallback,\n  requestCert = false,\n): Promise<{\n  duplex: DuplexStream<Uint8Array>;\n  tlsInfo: TlsInfo;\n}> {\n  const tlsInfo: TlsInfo = {};\n  const tlsSocketOptions = await createTlsSocketOptions(options, requestCert);\n\n  const secureSocket = new TLSSocket(Duplex.fromWeb(duplex), {\n    ...tlsSocketOptions,\n    isServer: true,\n    SNICallback: async (serverName, callback) => {\n      tlsInfo.serverName = serverName;\n      const updatedTlsSocketOptions = await createTlsSocketOptions(\n        options,\n        requestCert,\n        serverName,\n      );\n      callback(null, createSecureContext(updatedTlsSocketOptions));\n    },\n  });\n\n  await once(secureSocket, 'secure');\n  onServerSocketSecure(secureSocket);\n\n  const peerCertificate = secureSocket.getPeerCertificate();\n\n  if (peerCertificate && 'raw' in peerCertificate) {\n    tlsInfo.clientCertificate = new Uint8Array(peerCertificate.raw);\n  }\n\n  return {\n    duplex: Duplex.toWeb(secureSocket),\n    tlsInfo,\n  };\n}\n\nasync function createTlsSocketOptions(\n  optionsOrCallback: TlsOptions | TlsOptionsCallback,\n  requestCert: boolean,\n  serverName?: string,\n): Promise<TLSSocketOptions> {\n  const { key, cert, ca, passphrase } =\n    typeof optionsOrCallback === 'function'\n      ? await optionsOrCallback(serverName)\n      : optionsOrCallback;\n\n  return {\n    key: Buffer.from(key),\n    cert: Buffer.from(cert),\n    ca: ca ? Buffer.from(ca) : undefined,\n    passphrase,\n    requestCert,\n  };\n}\n\n/**\n * Internal Node.js handler copied and modified from source to validate client certs.\n * https://github.com/nodejs/node/blob/aeaffbb385c9fc756247e6deaa70be8eb8f59496/lib/_tls_wrap.js#L1185-L1203\n *\n * Without this, `authorized` is always `false` on the TLSSocket and we never know if the client cert is valid.\n */\n// biome-ignore lint/suspicious/noExplicitAny: <explanation>\nfunction onServerSocketSecure(secureSocket: TLSSocket & any) {\n  if (secureSocket._requestCert) {\n    const verifyError = secureSocket._handle.verifyError();\n    if (verifyError) {\n      secureSocket.authorizationError = verifyError.code;\n    } else {\n      secureSocket.authorized = true;\n    }\n  }\n}\n"],"mappings":"4CACA,OAAS,UAAAA,MAAc,SCDvB,OAAS,mBAAAC,MAAuB,SAChC,OAAS,QAAAC,MAAY,SACrB,OAAS,UAAAC,MAAc,SACvB,OAAS,aAAAC,EAAkC,uBAAAC,MAA2B,MAKtE,eAAsBC,EAAoBC,EAGvC,CACD,IAAMC,EAAO,IAAIP,EAAgB,OAAO,KAAKM,EAAY,WAAW,CAAC,EAE/DE,EAA2C,OAAO,YACtDD,EAAK,QAAQ,MAAM,KAAK,EAAE,IAAKE,GAAUA,EAAM,MAAM,GAAG,CAAC,CAC3D,EAEA,MAAO,OAAQD,GAAoBA,EAAiB,KAAOF,EAAY,QACzE,CAEA,eAAsBI,EACpBC,EACAC,EACAC,EAAc,GAIb,CACD,IAAMC,EAAmB,CAAC,EACpBC,EAAmB,MAAMC,EAAuBJ,EAASC,CAAW,EAEpEI,EAAe,IAAId,EAAUD,EAAO,QAAQS,CAAM,EAAG,CACzD,GAAGI,EACH,SAAU,GACV,YAAa,MAAOG,EAAYC,IAAa,CAC3CL,EAAQ,WAAaI,EACrB,IAAME,EAA0B,MAAMJ,EACpCJ,EACAC,EACAK,CACF,EACAC,EAAS,KAAMf,EAAoBgB,CAAuB,CAAC,CAC7D,CACF,CAAC,EAED,MAAMnB,EAAKgB,EAAc,QAAQ,EACjCI,EAAqBJ,CAAY,EAEjC,IAAMK,EAAkBL,EAAa,mBAAmB,EAExD,OAAIK,GAAmB,QAASA,IAC9BR,EAAQ,kBAAoB,IAAI,WAAWQ,EAAgB,GAAG,GAGzD,CACL,OAAQpB,EAAO,MAAMe,CAAY,EACjC,QAAAH,CACF,CACF,CAEA,eAAeE,EACbO,EACAV,EACAK,EAC2B,CAC3B,GAAM,CAAE,IAAAM,EAAK,KAAAjB,EAAM,GAAAkB,EAAI,WAAAC,CAAW,EAChC,OAAOH,GAAsB,WACzB,MAAMA,EAAkBL,CAAU,EAClCK,EAEN,MAAO,CACL,IAAK,OAAO,KAAKC,CAAG,EACpB,KAAM,OAAO,KAAKjB,CAAI,EACtB,GAAIkB,EAAK,OAAO,KAAKA,CAAE,EAAI,OAC3B,WAAAC,EACA,YAAAb,CACF,CACF,CASA,SAASQ,EAAqBJ,EAA+B,CAC3D,GAAIA,EAAa,aAAc,CAC7B,IAAMU,EAAcV,EAAa,QAAQ,YAAY,EACjDU,EACFV,EAAa,mBAAqBU,EAAY,KAE9CV,EAAa,WAAa,EAE9B,CACF,CD9EA,eAAsBW,EAAeC,EAAgBC,EAAqC,CACxF,OAAOC,EAAiBC,EAAO,MAAMH,CAAM,EAAGC,CAAO,CACvD,CASA,eAAsBC,EACpBE,EACAH,EACA,CACA,IAAMI,EAAkC,CACtC,GAAGJ,CACL,EAEII,GAAM,MAAM,SAAW,SACzBA,EAAK,KAAK,oBAAsBC,GAGlC,IAAMC,EAAuC,CAC3C,WAAAC,CACF,EAEA,OAAO,IAAIC,EAAmBL,EAAQH,EAASM,CAAQ,CACzD","names":["Duplex","X509Certificate","once","Duplex","TLSSocket","createSecureContext","validateCredentials","credentials","cert","subjectKeyValues","entry","upgradeTls","duplex","options","requestCert","tlsInfo","tlsSocketOptions","createTlsSocketOptions","secureSocket","serverName","callback","updatedTlsSocketOptions","onServerSocketSecure","peerCertificate","optionsOrCallback","key","ca","passphrase","verifyError","fromNodeSocket","socket","options","fromDuplexStream","Duplex","duplex","opts","validateCredentials","adapters","upgradeTls","PostgresConnection"]}