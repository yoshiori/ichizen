"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _optionalChain(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }var _chunkFCOSUQFUcjs = require('../../chunk-FCOSUQFU.cjs');var _stream = require('stream');var _crypto = require('crypto');var _events = require('events');var _tls = require('tls');async function m(t){let e=new (0, _crypto.X509Certificate)(Buffer.from(t.certificate)),r=Object.fromEntries(e.subject.split(/, ?/).map(o=>o.split("=")));return"CN"in r&&r.CN===t.username}async function l(t,e,r=!1){let o={},i=await f(e,r),n=new (0, _tls.TLSSocket)(_stream.Duplex.fromWeb(t),{...i,isServer:!0,SNICallback:async(a,u)=>{o.serverName=a;let y=await f(e,r,a);u(null,_tls.createSecureContext.call(void 0, y))}});await _events.once.call(void 0, n,"secure"),x(n);let s=n.getPeerCertificate();return s&&"raw"in s&&(o.clientCertificate=new Uint8Array(s.raw)),{duplex:_stream.Duplex.toWeb(n),tlsInfo:o}}async function f(t,e,r){let{key:o,cert:i,ca:n,passphrase:s}=typeof t=="function"?await t(r):t;return{key:Buffer.from(o),cert:Buffer.from(i),ca:n?Buffer.from(n):void 0,passphrase:s,requestCert:e}}function x(t){if(t._requestCert){let e=t._handle.verifyError();e?t.authorizationError=e.code:t.authorized=!0}}async function A(t,e){return O(_stream.Duplex.toWeb(t),e)}async function O(t,e){let r={...e};_optionalChain([r, 'optionalAccess', _ => _.auth, 'optionalAccess', _2 => _2.method])==="cert"&&(r.auth.validateCredentials=m);let o={upgradeTls:l};return new (0, _chunkFCOSUQFUcjs.w)(t,e,o)}exports.fromDuplexStream = O; exports.fromNodeSocket = A;
//# sourceMappingURL=index.cjs.map